generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                String         @unique(map: "profiles_email_idx")
  role                 String         @default("student")
  createdAt            DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  password             String?
  name                 String?
  image                String?
  google_id            String?        @unique(map: "profiles_google_id_idx")
  facebook_id          String?        @unique(map: "profiles_facebook_id_idx")
  emailVerified        DateTime?      @map("email_verified")
  passwordResetExpires DateTime?      @map("password_reset_expires")
  passwordResetToken   String?        @map("password_reset_token")
  status               String         @default("pending")
  verificationToken    String?        @map("verification_token")
  passwordUpdatedAt    DateTime?      @map("password_updated_at") @db.Timestamptz(6)
  // Profile fields
  sexe                 String? // "M" or "F"
  niveauId             String?        @map("niveau_id") @db.Uuid
  profileCompleted     Boolean        @default(false) @map("profile_completed")
  reports              Report[]
  progress             UserProgress[]
  niveau               Niveau?        @relation(fields: [niveauId], references: [id])

  @@map("profiles")
}

model Specialty {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  imageUrl    String?   @map("imageurl")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  lectures    Lecture[]

  @@map("specialties")
}

model Lecture {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  specialtyId String         @map("specialty_id") @db.Uuid
  title       String
  description String?
  createdAt   DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  specialty   Specialty      @relation(fields: [specialtyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  questions   Question[]
  reports     Report[]
  progress    UserProgress[]

  @@index([specialtyId], map: "idx_lectures_specialty")
  @@map("lectures")
}

model Question {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lectureId          String   @map("lecture_id") @db.Uuid
  type               String
  text               String
  options            Json?
  correctAnswers     String[] @map("correct_answers")
  explanation        String?
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  courseReminder     String?  @map("course_reminder")
  number             Int?
  session            String?
  mediaUrl           String?  @map("media_url")
  mediaType          String?  @map("media_type")
  // Clinical case fields
  caseNumber         Int?     @map("case_number")
  caseText           String?  @map("case_text")
  caseQuestionNumber Int?     @map("case_question_number")
  lecture            Lecture  @relation(fields: [lectureId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reports            Report[]

  @@index([number], map: "idx_questions_number")
  @@index([caseNumber, caseQuestionNumber], map: "idx_questions_case")
  @@map("questions")
}

model UserProgress {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  lectureId    String   @map("lecture_id") @db.Uuid
  questionId   String?  @map("question_id") @db.Uuid
  completed    Boolean  @default(false)
  score        Float?
  lastAccessed DateTime @default(now()) @map("last_accessed") @db.Timestamptz(6)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  lecture      Lecture  @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lectureId, questionId], map: "unique_user_lecture_question")
  @@index([userId, questionId], map: "idx_user_progress_user_question")
  @@index([userId, lectureId], map: "idx_user_progress_user_lecture")
  @@map("user_progress")
}

model Report {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  questionId String   @map("question_id") @db.Uuid
  lectureId  String   @map("lecture_id") @db.Uuid
  message    String
  userId     String?  @map("user_id") @db.Uuid
  status     String   @default("pending")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  lecture    Lecture  @relation(fields: [lectureId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  question   Question @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       User?    @relation(fields: [userId], references: [id])

  @@map("reports")
}

model Niveau {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @unique // "1ere", "2eme", "3eme", "4eme", "5eme"
  order     Int      @unique // 1, 2, 3, 4, 5 for sorting
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  users     User[]

  @@map("niveaux")
}
